# GitHub Actions Workflow for Android Application Deployment
#
# OVERVIEW:
# This workflow supports building and publishing applications across multiple platforms:
# - Android (APK/AAB)
#
# PREREQUISITES:
# 1. Ensure your project is configured with:
#    - Gradle build system
#    - Fastlane for deployment automation
#    - Separate modules/package names for each platform
#
# REQUIRED SECRETS:
# Configure the following secrets in GitHub repository settings:
#
# Android-related secrets:
# - original_keystore_file: Base64 encoded Android release keystore
# - original_keystore_file_password: Keystore password
# - original_keystore_alias: Keystore alias
# - original_keystore_alias_password: Keystore alias password
#
# - upload_keystore_file: Base64 encoded Android upload keystore
# - upload_keystore_file_password: Upload keystore password
# - upload_keystore_alias: Upload keystore alias
# - upload_keystore_alias_password: Upload keystore alias password
#
# Google and Firebase credentials:
# - google_services: Google Services configuration JSON
# - playstore_creds: Play Store service account credentials
# - firebase_creds: Firebase distribution credentials
# - token: GitHub token for repository access
#

# WORKFLOW INPUTS:
# - release_type: 'internal' (default) or 'beta'
# - target_branch: Branch to use for release (default: 'dev')
# - android_package_name: Name of Android module
# - tester_groups: Firebase tester group for distribution

# USAGE:
# 1. Ensure all required secrets are configured
# 2. Customize package names in workflow inputs
# 3. Toggle platform-specific publishing flags
# 4. Trigger workflow manually or via GitHub Actions UI

# NOTES:
# - Some TODO sections exist for future implementation
# - Requires Fastlane and specific project structure
# - Assumes Kotlin Multiplatform or similar cross-platform setup

name: Android App Build and Publish

on:
  workflow_call:
    inputs:
      java-version:
        description: 'Java version to use (e.g., 17, 21).'
        required: false
        default: '17'
        type: string

      release_type:
        type: string
        default: 'internal'
        description: Release Type

      target_branch:
        type: string
        default: 'dev'
        description: 'Target branch for release'

      android_package_name:
        description: 'Name of the Android project module'
        type: string
        required: true

      tester_groups:
        type: string
        description: 'Firebase Tester Group'
        required: true

    secrets:
      # Android-related secrets
      original_keystore_file:
        description: 'Base64 encoded Android release keystore'
        required: false
      original_keystore_file_password:
        description: 'Keystore password'
        required: false
      original_keystore_alias:
        description: 'Keystore alias'
        required: false
      original_keystore_alias_password:
        description: 'Keystore alias password'
        required: false

      upload_keystore_file:
        description: 'Base64 encoded Android upload keystore'
        required: false
      upload_keystore_file_password:
        description: 'Upload keystore password'
        required: false
      upload_keystore_alias:
        description: 'Upload keystore alias'
        required: false
      upload_keystore_alias_password:
        description: 'Upload keystore alias password'
        required: false

      # Google and Firebase credentials
      google_services:
        description: 'Google Services configuration JSON'
        required: false
      playstore_creds:
        description: 'Play Store service account credentials'
        required: false
      firebase_creds:
        description: 'Firebase distribution credentials'
        required: false
      token:
        description: 'Github Token'
        required: false

permissions:
  contents: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Publish Android app on Firebase App Distribution
  publish_android_on_firebase:
    name: Deploy Android App On Firebase
    runs-on: macos-latest
    steps:
      # Check out caller repository
      - name: Checkout Caller Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Publish Android App on Firebase
        uses: openMF/mifos-x-actionhub-android-firebase-publish@v1.0.0
        with:
          android_package_name: ${{ inputs.android_package_name }}
          keystore_file: ${{ secrets.original_keystore_file }}
          keystore_password: ${{ secrets.original_keystore_file_password }}
          keystore_alias: ${{ secrets.original_keystore_alias }}
          keystore_alias_password: ${{ secrets.original_keystore_alias_password }}
          google_services: ${{ secrets.google_services }}
          firebase_creds: ${{ secrets.firebase_creds }}
          tester_groups: ${{ inputs.tester_groups }}

  # Publish Android app on Play Store
  publish_android_on_playstore:
    name: Publish Android App On Play Store
    runs-on: macos-latest
    steps:
      # Check out caller repository
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Promote Android App to Beta or Internal
        uses: openMF/mifos-x-actionhub-publish-android-on-playstore-beta@v1.0.0
        with:
          release_type: ${{ inputs.release_type }}
          android_package_name: ${{ inputs.android_package_name }}
          google_services: ${{ secrets.google_services }}
          playstore_creds: ${{ secrets.playstore_creds }}
          keystore_file: ${{ secrets.upload_keystore_file }}
          keystore_password: ${{ secrets.upload_keystore_file_password }}
          keystore_alias: ${{ secrets.upload_keystore_alias }}
          keystore_alias_password: ${{ secrets.upload_keystore_alias_password }}

  # Creates GitHub release with all built artifacts
  github_release:
    name: Create Github Release
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: ${{ inputs.java-version }}
      - uses: gradle/actions/setup-gradle@v4

      - name: Cache Gradle and build outputs
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            build
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      # Setup Ruby for Fastlane automation
      - name: Configure Ruby
        uses: ruby/setup-ruby@a2bbe5b1b236842c1cb7dd11e8e3b51e0a616acc # v1.202.0
        with:
          bundler-cache: true

      # Install Fastlane and required plugins for deployment automation
      - name: Install Fastlane
        run: |
          gem install bundler:2.2.27
          bundle install --jobs 4 --retry 3
          bundle exec fastlane add_plugin firebase_app_distribution
          bundle exec fastlane add_plugin increment_build_number

      - name: Build Android App
        uses: openMF/mifos-x-actionhub-build-android-app@v1.0.2
        with:
          build_type: 'Release'
          android_package_name: ${{ inputs.android_package_name }}
          google_services: ${{ secrets.google_services }}
          keystore_file: ${{ secrets.original_keystore_file }}
          keystore_password: ${{ secrets.original_keystore_file_password }}
          keystore_alias: ${{ secrets.original_keystore_alias }}
          keystore_alias_password: ${{ secrets.original_keystore_alias_password }}
          java-version: ${{ inputs.java-version }}

      # Get all build artifacts
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./all-artifacts

      # Debug: Show downloaded files
      - name: Display structure of downloaded files
        run: ls -R ./all-artifacts

      # Generate Release Number
      - name: Generate Release Number
        id: rel_number
        shell: bash
        run: |
          set +e  # Disable exit on error to handle task non-existence
          ./gradlew versionFile
          VERSIONFILE_EXIT_CODE=$?
          set -e  # Re-enable exit on error
          
          # Check if version file exists after attempting to generate it
          if [ -f "version.txt" ]; then
          echo "Using version from versionFile"
          VERSION=$(cat version.txt)

          # Count commits to generate version code
          VERSION_CODE=$(($(git rev-list --count HEAD) * 10))

          echo "Version from file: ${VERSION}"
          echo "Version Code: ${VERSION_CODE}"

          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "version-code=${VERSION_CODE}" >> $GITHUB_OUTPUT
          exit 0
          fi
          
          # Fallback to Git-based version generation
          # Get the latest tag or use 1.0.0 as default
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          
          # Remove 'v' prefix if present
          LATEST_TAG=${LATEST_TAG#v}
          
          # Count commits since the last tag
          COMMITS_SINCE_TAG=$(git rev-list ${LATEST_TAG}..HEAD --count)
          
          # Extract major, minor, patch from the latest tag
          IFS='.' read -r MAJOR MINOR PATCH <<< "${LATEST_TAG}"
          
          # Increment patch version and add commits as build number
          NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
          
          # Calculate version code (can be adjusted based on your versioning needs)
          VERSION_CODE=$(($(git rev-list --count HEAD) * 10))
          
          echo "Version: ${NEW_VERSION}"
          echo "Version Code: ${VERSION_CODE}"
          
          echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT


      - name: Generate Release Notes
        uses: actions/github-script@v7
        id: release-notes
        with:
          github-token: ${{ secrets.token }}
          script: |
            try {
              // Get latest release tag
              const latestRelease = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              const previousTag = latestRelease.data.tag_name;

              // Generate release notes
              const params = {
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: '${{ steps.rel_number.outputs.version }}',
                target_commitish: '${{ inputs.target_branch }}'
              };

              const { data } = await github.rest.repos.generateReleaseNotes(params);
              const changelog = data.body.replaceAll('`', '\'').replaceAll('"', '\'');

              // Write changelog files
              const fs = require('fs');
              fs.writeFileSync('changelogGithub', changelog);

              // Generate beta changelog
              const { execSync } = require('child_process');
              execSync('git log --format="* %s" HEAD^..HEAD > changelogBeta');

              return changelog;
            } catch (error) {
              console.error('Error generating release notes:', error);
              return '';
            }

      # Create GitHub pre-release with all artifacts
      - name: Create Github Pre-Release
        uses: softprops/action-gh-release@v2.0.8
        with:
          tag_name: ${{ steps.rel_number.outputs.version }}
          body_path: ./changelogGithub
          draft: false
          prerelease: true
          files: |
            ./all-artifacts/android-app/${{ inputs.android_package_name }}/build/outputs/apk/demo/release/*.apk
            ./all-artifacts/android-app/${{ inputs.android_package_name }}/build/outputs/apk/prod/release/*.apk